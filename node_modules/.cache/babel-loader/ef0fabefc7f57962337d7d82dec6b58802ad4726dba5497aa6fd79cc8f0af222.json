{"ast":null,"code":"const WebSocket = require('ws');\nconst server = new WebSocket.Server({\n  port: 8080\n});\nconst rooms = {}; // Object to store room data\n\nserver.on('connection', ws => {\n  ws.on('message', message => {\n    const data = JSON.parse(message);\n    switch (data.type) {\n      case 'join':\n        if (!rooms[data.room]) {\n          rooms[data.room] = [];\n        }\n        if (rooms[data.room].length < 2) {\n          const playerNumber = rooms[data.room].length + 1;\n          rooms[data.room].push({\n            ws,\n            playerNumber\n          });\n          ws.send(JSON.stringify({\n            type: 'playerNumber',\n            playerNumber\n          }));\n        } else {\n          ws.send(JSON.stringify({\n            type: 'error',\n            message: 'Room is full'\n          }));\n        }\n        break;\n      case 'move':\n        if (rooms[data.room]) {\n          rooms[data.room].forEach(({\n            ws\n          }) => {\n            ws.send(JSON.stringify({\n              type: 'update',\n              board: data.board,\n              turnPlayer: data.turnPlayer\n            }));\n          });\n        }\n\n        // Check for game over condition (win or draw)\n        if (data.gameOver) {\n          rooms[data.room].forEach(({\n            ws\n          }) => {\n            ws.send(JSON.stringify({\n              type: 'gameOver',\n              winner: data.winner\n            }));\n          });\n        }\n        break;\n      case 'message':\n        if (rooms[data.room]) {\n          rooms[data.room].forEach(({\n            ws\n          }) => {\n            ws.send(JSON.stringify({\n              type: 'message',\n              text: data.text\n            }));\n          });\n        }\n        break;\n      default:\n        break;\n    }\n  });\n  ws.on('close', () => {\n    // Clean up rooms on client disconnect\n    Object.keys(rooms).forEach(roomId => {\n      rooms[roomId] = rooms[roomId].filter(player => player.ws !== ws);\n      if (rooms[roomId].length === 0) {\n        delete rooms[roomId];\n      }\n    });\n  });\n});","map":{"version":3,"names":["WebSocket","require","server","Server","port","rooms","on","ws","message","data","JSON","parse","type","room","length","playerNumber","push","send","stringify","forEach","board","turnPlayer","gameOver","winner","text","Object","keys","roomId","filter","player"],"sources":["C:/Users/AkashPC/Documents/TicTacToeGameRoom/Frontend/my-app/src/Components/TicTacToeMulti.jsx"],"sourcesContent":["const WebSocket = require('ws');\r\n\r\nconst server = new WebSocket.Server({ port: 8080 });\r\nconst rooms = {}; // Object to store room data\r\n\r\nserver.on('connection', (ws) => {\r\n  ws.on('message', (message) => {\r\n    const data = JSON.parse(message);\r\n\r\n    switch (data.type) {\r\n      case 'join':\r\n        if (!rooms[data.room]) {\r\n          rooms[data.room] = [];\r\n        }\r\n\r\n        if (rooms[data.room].length < 2) {\r\n          const playerNumber = rooms[data.room].length + 1;\r\n          rooms[data.room].push({ ws, playerNumber });\r\n\r\n          ws.send(JSON.stringify({ type: 'playerNumber', playerNumber }));\r\n        } else {\r\n          ws.send(JSON.stringify({ type: 'error', message: 'Room is full' }));\r\n        }\r\n        break;\r\n\r\n      case 'move':\r\n        if (rooms[data.room]) {\r\n          rooms[data.room].forEach(({ ws }) => {\r\n            ws.send(JSON.stringify({\r\n              type: 'update',\r\n              board: data.board,\r\n              turnPlayer: data.turnPlayer\r\n            }));\r\n          });\r\n        }\r\n\r\n        // Check for game over condition (win or draw)\r\n        if (data.gameOver) {\r\n          rooms[data.room].forEach(({ ws }) => {\r\n            ws.send(JSON.stringify({\r\n              type: 'gameOver',\r\n              winner: data.winner\r\n            }));\r\n          });\r\n        }\r\n        break;\r\n\r\n      case 'message':\r\n        if (rooms[data.room]) {\r\n          rooms[data.room].forEach(({ ws }) => {\r\n            ws.send(JSON.stringify({\r\n              type: 'message',\r\n              text: data.text\r\n            }));\r\n          });\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  ws.on('close', () => {\r\n    // Clean up rooms on client disconnect\r\n    Object.keys(rooms).forEach((roomId) => {\r\n      rooms[roomId] = rooms[roomId].filter(player => player.ws !== ws);\r\n      if (rooms[roomId].length === 0) {\r\n        delete rooms[roomId];\r\n      }\r\n    });\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}