{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AkashPC\\\\Documents\\\\TicTacToeGameRoom\\\\Frontend\\\\my-app\\\\src\\\\Components\\\\TicTacToeMulti.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport BoardMulti from \"./BoardMulti\";\nimport ConfettiComponent from \"./Confetti\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './TicTacToe.css';\nimport { Link, useParams } from \"react-router-dom\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TicTacToeMulti() {\n  _s();\n  const {\n    roomId\n  } = useParams();\n  console.log(roomId);\n  const [turnPlayer, setTurnPlayer] = useState(1);\n  const [currentPlayer, setCurrentPlayer] = useState(null);\n  const [playerId, setPlayerId] = useState(localStorage.getItem('playerId') || uuidv4());\n  const [board, setBoard] = useState([[0, 0, 0], [0, 0, 0], [0, 0, 0]]);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameWon, setGameWon] = useState(false);\n  const [winner, setWinner] = useState(0);\n  const [showConfetti, setShowConfetti] = useState(false);\n  const [moves, setMoves] = useState(0);\n  const [messages, setMessages] = useState([]);\n  const ws = useRef(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    ws.current = new WebSocket('ws://localhost:8080');\n    ws.current.onopen = () => {\n      ws.current.send(JSON.stringify({\n        type: 'join',\n        room: roomId,\n        playerId\n      }));\n    };\n    ws.current.onmessage = event => {\n      const data = JSON.parse(event.data);\n      console.log(data);\n      switch (data.type) {\n        case 'playerNumber':\n          setCurrentPlayer(data.playerNumber);\n          setPlayerId(data.playerId);\n          localStorage.setItem('playerId', data.playerId);\n          break;\n        case 'start':\n          console.log(data.message);\n          break;\n        case 'update':\n          setBoard(data.board);\n          setTurnPlayer(data.turnPlayer);\n          break;\n        case 'gameOver':\n          setBoard(data.board); // Ensure the final board state is shown\n          setGameOver(true);\n          setWinner(data.winner);\n          setGameWon(data.winner !== 0); // True if someone won, false if it's a tie\n          setShowConfetti(data.winner === currentPlayer); // Show confetti if the current player won\n          break;\n        case 'message':\n          setMessages(prevMessages => [...prevMessages, data.text]);\n          break;\n        case 'reset':\n          resetLocalGameState();\n          break;\n        case 'error':\n          alert(data.message);\n          navigate('/');\n          break;\n        case 'syncState':\n          setBoard(data.board);\n          setTurnPlayer(data.turnPlayer);\n          break;\n        default:\n          break;\n      }\n    };\n    return () => {\n      ws.current.close();\n    };\n  }, [roomId, playerId]);\n  const getPlayer = () => {\n    return currentPlayer;\n  };\n  const boardMove = space => {\n    const currPlayer = getPlayer();\n    if (currPlayer == null || currPlayer !== turnPlayer) {\n      console.log('Move prevented: currentPlayer not set or not player\\'s turn');\n      return;\n    }\n    const row = Math.floor(space / 3);\n    const col = space % 3;\n    let newBoard = [...board];\n    newBoard[row][col] = currPlayer;\n    setBoard(newBoard);\n    setMoves(moves + 1);\n    setTurnPlayer(turnPlayer % 2 + 1);\n    ws.current.send(JSON.stringify({\n      type: 'move',\n      room: roomId,\n      board: newBoard,\n      turnPlayer: currentPlayer,\n      moveCnt: moves\n    }));\n  };\n  const resetGame = () => {\n    ws.current.send(JSON.stringify({\n      type: 'playAgain',\n      room: roomId,\n      playerId: playerId\n    }));\n  };\n  const sendMessage = playerMessage => {\n    const text = 'Player ' + currentPlayer + ': ' + playerMessage;\n    ws.current.send(JSON.stringify({\n      type: 'message',\n      room: roomId,\n      text\n    }));\n  };\n  const requestSwitchPlayers = () => {\n    ws.current.send(JSON.stringify({\n      type: 'switchRequest',\n      room: roomId,\n      playerId: playerId\n    }));\n  };\n  const resetLocalGameState = () => {\n    setTurnPlayer(1);\n    setBoard([[0, 0, 0], [0, 0, 0], [0, 0, 0]]);\n    setGameWon(false);\n    setWinner(0);\n    setShowConfetti(false);\n    setMoves(0);\n    setGameOver(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"TicTacBG\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Welcome To The Game Room Player \", currentPlayer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [gameWon ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Player \", winner, \" won!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"It's a tie!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success mb-2\",\n        onClick: resetGame,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Player \", turnPlayer, \"'s turn\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(BoardMulti, {\n      board: board,\n      boardMove: boardMove,\n      gameOver: gameOver\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger mt-2\",\n        children: \"Return\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-secondary mt-2\",\n      onClick: requestSwitchPlayers,\n      children: \"Switch Player Number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfettiComponent, {\n      active: showConfetti\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: msg\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"chatInput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: () => sendMessage(document.getElementById('chatInput').value),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(TicTacToeMulti, \"0ocS7RJG7TYEhEgm6GxssNZnBzQ=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = TicTacToeMulti;\nexport default TicTacToeMulti;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import BoardMulti from \"./BoardMulti\";\n// import ConfettiComponent from \"./Confetti\";\n// import 'bootstrap/dist/css/bootstrap.css';\n// import './TicTacToe.css';\n// import { Link, useParams } from \"react-router-dom\";\n// import { v4 as uuidv4 } from 'uuid';\n// import { useNavigate } from 'react-router-dom';\n\n// function TicTacToeMulti() {\n//   const { roomId } = useParams();\n//   const [turnPlayer, setTurnPlayer] = useState(1);\n//   const [currentPlayer, setCurrentPlayer] = useState(null);\n//   const [playerId, setPlayerId] = useState(localStorage.getItem('playerId') || uuidv4());\n//   const [board, setBoard] = useState([\n//     [0, 0, 0],\n//     [0, 0, 0],\n//     [0, 0, 0],\n//   ]);\n//   const [gameOver, setGameOver] = useState(false);\n//   const [gameWon, setGameWon] = useState(false);\n//   const [winner, setWinner] = useState(0);\n//   const [showConfetti, setShowConfetti] = useState(false);\n//   const [moves, setMoves] = useState(0);\n//   const [messages, setMessages] = useState([]);\n//   const ws = useRef(null);\n\n//   const navigate = useNavigate();\n\n//   // WebSocket setup\n//   useEffect(() => {\n//     ws.current = new WebSocket('ws://localhost:8080');\n\n//     ws.current.onopen = () => {\n//       ws.current.send(JSON.stringify({ type: 'join', room: roomId, playerId }));\n//     };\n\n//     ws.current.onmessage = (event) => {\n//       const data = JSON.parse(event.data);\n//       console.log(data);\n//       switch (data.type) {\n//         case 'playerNumber':\n//           if (data.players > 2) {\n//             alert('The game already has two players.');\n//             ws.current.close();\n//             navigate('/'); // Redirect any third player out of the game\n//           } else {\n//             setCurrentPlayer(data.playerNumber);\n//             setPlayerId(data.playerId);\n//             localStorage.setItem('playerId', data.playerId);\n//           }\n//           break;\n//         case 'start':\n//           console.log(data.message);\n//           break;\n//         case 'update':\n//           setBoard(data.board);\n//           setTurnPlayer(data.turnPlayer);\n//           break;\n//         case 'gameOver':\n//           setBoard(data.board);\n//           setGameOver(true);\n//           setWinner(data.winner);\n//           setGameWon(data.winner !== 0);\n//           setShowConfetti(data.winner === currentPlayer);\n//           break;\n//         case 'message':\n//           setMessages((prevMessages) => [...prevMessages, data.text]);\n//           break;\n//         case 'reset':\n//           resetLocalGameState();\n//           break;\n//         case 'error':\n//           alert(data.message);\n//           navigate('/');\n//           break;\n//         case 'syncState':\n//           setBoard(data.board);\n//           setTurnPlayer(data.turnPlayer);\n//           break;\n//         default:\n//           break;\n//       }\n//     };\n\n//     return () => {\n//       ws.current.close();\n//     };\n//   }, [roomId, playerId]);\n\n//   // Get the current player number\n//   const getPlayer = () => {\n//     return currentPlayer;\n//   };\n\n//   // Handle a move on the board\n//   const boardMove = (space) => {\n//     const currPlayer = getPlayer();\n//     if (currPlayer == null || currPlayer !== turnPlayer || gameOver || currentPlayer > 2) {\n//       console.log('Move prevented: either game is over, not the player\\'s turn, or invalid player');\n//       return;\n//     }\n\n//     const row = Math.floor(space / 3);\n//     const col = space % 3;\n//     let newBoard = [...board];\n//     if (newBoard[row][col] === 0) {  // Only allow a move in an empty space\n//       newBoard[row][col] = currPlayer;\n\n//       setBoard(newBoard);\n//       setMoves(moves + 1);\n//       setTurnPlayer((turnPlayer % 2) + 1);\n\n//       // Send the move to the server\n//       ws.current.send(JSON.stringify({\n//         type: 'move',\n//         room: roomId,\n//         board: newBoard,\n//         turnPlayer: (turnPlayer % 2) + 1,  // Update turn for the next player\n//         moveCnt: moves + 1\n//       }));\n//     }\n//   };\n\n//   // Reset the game state and notify the server\n//   const resetGame = () => {\n//     ws.current.send(JSON.stringify({\n//       type: 'playAgain',\n//       room: roomId,\n//       playerId: playerId,\n//     }));\n//   };\n\n//   // Send a message in the chat\n//   const sendMessage = (playerMessage) => {\n//     const text = 'Player ' + currentPlayer + ': ' + playerMessage;\n//     ws.current.send(JSON.stringify({ type: 'message', room: roomId, text }));\n//   };\n\n//   // Request to switch player numbers\n//   const requestSwitchPlayers = () => {\n//     ws.current.send(JSON.stringify({\n//       type: 'switchRequest',\n//       room: roomId,\n//       playerId: playerId,\n//     }));\n//   };\n\n//   // Reset the local game state\n//   const resetLocalGameState = () => {\n//     setTurnPlayer(1);\n//     setBoard([\n//       [0, 0, 0],\n//       [0, 0, 0],\n//       [0, 0, 0],\n//     ]);\n//     setGameWon(false);\n//     setWinner(0);\n//     setShowConfetti(false);\n//     setMoves(0);\n//     setGameOver(false);\n//   };\n\n//   return (\n//     <div className=\"TicTacBG\">\n//       <h1>Welcome To The Game Room Player {currentPlayer}</h1>\n//       {gameOver ? (\n//         <div>\n//           {gameWon ? (\n//             <h2>Player {winner} won!</h2>\n//           ) : (\n//             <h2>It's a tie!</h2>\n//           )}\n//           <button className=\"btn btn-success mb-2\" onClick={resetGame}>Play Again</button>\n//         </div>\n//       ) : (\n//         <h2>Player {turnPlayer}'s turn</h2>\n//       )}\n//       <BoardMulti\n//         board={board}\n//         boardMove={boardMove}\n//         gameOver={gameOver}\n//       />\n//       <Link to=\"/\"> <button className=\"btn btn-danger mt-2\">Return</button> </Link>\n//       <button className=\"btn btn-secondary mt-2\" onClick={requestSwitchPlayers}>Switch Player Number</button>\n//       <ConfettiComponent active={showConfetti} />\n//       <div className=\"chat\">\n//         <h3>Chat</h3>\n//         <div className=\"messages\">\n//           {messages.map((msg, index) => (\n//             <p key={index}>{msg}</p>\n//           ))}\n//         </div>\n//         <input type=\"text\" id=\"chatInput\" />\n//         <button className=\"btn btn-primary\" onClick={() => sendMessage(document.getElementById('chatInput').value)}>Send</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default TicTacToeMulti;\nvar _c;\n$RefreshReg$(_c, \"TicTacToeMulti\");","map":{"version":3,"names":["React","useState","useEffect","useRef","BoardMulti","ConfettiComponent","Link","useParams","v4","uuidv4","useNavigate","jsxDEV","_jsxDEV","TicTacToeMulti","_s","roomId","console","log","turnPlayer","setTurnPlayer","currentPlayer","setCurrentPlayer","playerId","setPlayerId","localStorage","getItem","board","setBoard","gameOver","setGameOver","gameWon","setGameWon","winner","setWinner","showConfetti","setShowConfetti","moves","setMoves","messages","setMessages","ws","navigate","current","WebSocket","onopen","send","JSON","stringify","type","room","onmessage","event","data","parse","playerNumber","setItem","message","prevMessages","text","resetLocalGameState","alert","close","getPlayer","boardMove","space","currPlayer","row","Math","floor","col","newBoard","moveCnt","resetGame","sendMessage","playerMessage","requestSwitchPlayers","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","to","active","map","msg","index","id","document","getElementById","value","_c","$RefreshReg$"],"sources":["C:/Users/AkashPC/Documents/TicTacToeGameRoom/Frontend/my-app/src/Components/TicTacToeMulti.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport BoardMulti from \"./BoardMulti\";\r\nimport ConfettiComponent from \"./Confetti\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './TicTacToe.css';\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction TicTacToeMulti() {\r\n  const { roomId } = useParams();\r\n  console.log(roomId);\r\n  const [turnPlayer, setTurnPlayer] = useState(1);\r\n  const [currentPlayer, setCurrentPlayer] = useState(null);\r\n  const [playerId, setPlayerId] = useState(localStorage.getItem('playerId') || uuidv4());\r\n  const [board, setBoard] = useState([\r\n    [0, 0, 0],\r\n    [0, 0, 0],\r\n    [0, 0, 0],\r\n  ]);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [gameWon, setGameWon] = useState(false);\r\n  const [winner, setWinner] = useState(0);\r\n  const [showConfetti, setShowConfetti] = useState(false);\r\n  const [moves, setMoves] = useState(0);\r\n  const [messages, setMessages] = useState([]);\r\n  const ws = useRef(null);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    ws.current = new WebSocket('ws://localhost:8080');\r\n\r\n    ws.current.onopen = () => {\r\n      ws.current.send(JSON.stringify({ type: 'join', room: roomId, playerId }));\r\n    };\r\n\r\n    ws.current.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      console.log(data);\r\n      switch (data.type) {\r\n        case 'playerNumber':\r\n          setCurrentPlayer(data.playerNumber);\r\n          setPlayerId(data.playerId);\r\n          localStorage.setItem('playerId', data.playerId);\r\n          break;\r\n        case 'start':\r\n          console.log(data.message);\r\n          break;\r\n        case 'update':\r\n          setBoard(data.board);\r\n          setTurnPlayer(data.turnPlayer);\r\n          break;\r\n        case 'gameOver':\r\n          setBoard(data.board);  // Ensure the final board state is shown\r\n          setGameOver(true);\r\n          setWinner(data.winner);\r\n          setGameWon(data.winner !== 0);  // True if someone won, false if it's a tie\r\n          setShowConfetti(data.winner === currentPlayer);  // Show confetti if the current player won\r\n          break;\r\n        case 'message':\r\n          setMessages((prevMessages) => [...prevMessages, data.text]);\r\n          break;\r\n        case 'reset':\r\n          resetLocalGameState();\r\n          break;\r\n        case 'error':\r\n          alert(data.message);\r\n          navigate('/')\r\n\r\n          break;\r\n        case 'syncState':\r\n          setBoard(data.board);\r\n          setTurnPlayer(data.turnPlayer);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    return () => {\r\n      ws.current.close();\r\n    };\r\n  }, [roomId, playerId]);\r\n\r\n  const getPlayer = () => {\r\n    return currentPlayer;\r\n  };\r\n\r\n  const boardMove = (space) => {\r\n    const currPlayer = getPlayer();\r\n    if (currPlayer == null || currPlayer !== turnPlayer) {\r\n      console.log('Move prevented: currentPlayer not set or not player\\'s turn');\r\n      return;\r\n    }\r\n\r\n    const row = Math.floor(space / 3);\r\n    const col = space % 3;\r\n    let newBoard = [...board];\r\n    newBoard[row][col] = currPlayer;\r\n\r\n    setBoard(newBoard);\r\n    setMoves(moves + 1);\r\n    \r\n   setTurnPlayer((turnPlayer % 2) + 1)\r\n\r\n    ws.current.send(JSON.stringify({\r\n      type: 'move',\r\n      room: roomId,\r\n      board: newBoard,\r\n      turnPlayer: currentPlayer,\r\n      moveCnt:moves\r\n    }));\r\n  };\r\n\r\n\r\n  const resetGame = () => {\r\n    ws.current.send(JSON.stringify({\r\n      type: 'playAgain',\r\n      room: roomId,\r\n      playerId: playerId,\r\n    }));\r\n  };\r\n\r\n  const sendMessage = (playerMessage) => {\r\n    const text = 'Player ' + currentPlayer + ': '  + playerMessage \r\n    ws.current.send(JSON.stringify({ type: 'message', room: roomId,text }));\r\n  };\r\n\r\n  const requestSwitchPlayers = () => {\r\n    ws.current.send(JSON.stringify({\r\n      type: 'switchRequest',\r\n      room: roomId,\r\n      playerId: playerId,\r\n    }));\r\n  };\r\n\r\n  const resetLocalGameState = () => {\r\n    setTurnPlayer(1);\r\n    setBoard([\r\n      [0, 0, 0],\r\n      [0, 0, 0],\r\n      [0, 0, 0],\r\n    ]);\r\n    setGameWon(false);\r\n    setWinner(0);\r\n    setShowConfetti(false);\r\n    setMoves(0);\r\n    setGameOver(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"TicTacBG\">\r\n      <h1>Welcome To The Game Room Player {currentPlayer}</h1>\r\n      {gameOver ? (\r\n        <div>\r\n          {gameWon ? (\r\n            <h2>Player {winner} won!</h2>\r\n          ) : (\r\n            <h2>It's a tie!</h2>\r\n          )}\r\n          <button className=\"btn btn-success mb-2\" onClick={resetGame}>Play Again</button>\r\n        </div>\r\n      ) : (\r\n        <h2>Player {turnPlayer}'s turn</h2>\r\n      )}\r\n      <BoardMulti\r\n        board={board}\r\n        boardMove={boardMove}\r\n        gameOver={gameOver}\r\n      />\r\n      <Link to=\"/\"> <button className=\"btn btn-danger mt-2\">Return</button> </Link>\r\n      <button className=\"btn btn-secondary mt-2\" onClick={requestSwitchPlayers}>Switch Player Number</button>\r\n      <ConfettiComponent active={showConfetti} />\r\n      <div className=\"chat\">\r\n        <h3>Chat</h3>\r\n        <div className=\"messages\">\r\n          {messages.map((msg, index) => (\r\n            <p key={index}>{msg}</p>\r\n          ))}\r\n        </div>\r\n        <input type=\"text\" id=\"chatInput\" />\r\n        <button className=\"btn btn-primary\" onClick={() => sendMessage(document.getElementById('chatInput').value)}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TicTacToeMulti;\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import BoardMulti from \"./BoardMulti\";\r\n// import ConfettiComponent from \"./Confetti\";\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n// import './TicTacToe.css';\r\n// import { Link, useParams } from \"react-router-dom\";\r\n// import { v4 as uuidv4 } from 'uuid';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// function TicTacToeMulti() {\r\n//   const { roomId } = useParams();\r\n//   const [turnPlayer, setTurnPlayer] = useState(1);\r\n//   const [currentPlayer, setCurrentPlayer] = useState(null);\r\n//   const [playerId, setPlayerId] = useState(localStorage.getItem('playerId') || uuidv4());\r\n//   const [board, setBoard] = useState([\r\n//     [0, 0, 0],\r\n//     [0, 0, 0],\r\n//     [0, 0, 0],\r\n//   ]);\r\n//   const [gameOver, setGameOver] = useState(false);\r\n//   const [gameWon, setGameWon] = useState(false);\r\n//   const [winner, setWinner] = useState(0);\r\n//   const [showConfetti, setShowConfetti] = useState(false);\r\n//   const [moves, setMoves] = useState(0);\r\n//   const [messages, setMessages] = useState([]);\r\n//   const ws = useRef(null);\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   // WebSocket setup\r\n//   useEffect(() => {\r\n//     ws.current = new WebSocket('ws://localhost:8080');\r\n\r\n//     ws.current.onopen = () => {\r\n//       ws.current.send(JSON.stringify({ type: 'join', room: roomId, playerId }));\r\n//     };\r\n\r\n//     ws.current.onmessage = (event) => {\r\n//       const data = JSON.parse(event.data);\r\n//       console.log(data);\r\n//       switch (data.type) {\r\n//         case 'playerNumber':\r\n//           if (data.players > 2) {\r\n//             alert('The game already has two players.');\r\n//             ws.current.close();\r\n//             navigate('/'); // Redirect any third player out of the game\r\n//           } else {\r\n//             setCurrentPlayer(data.playerNumber);\r\n//             setPlayerId(data.playerId);\r\n//             localStorage.setItem('playerId', data.playerId);\r\n//           }\r\n//           break;\r\n//         case 'start':\r\n//           console.log(data.message);\r\n//           break;\r\n//         case 'update':\r\n//           setBoard(data.board);\r\n//           setTurnPlayer(data.turnPlayer);\r\n//           break;\r\n//         case 'gameOver':\r\n//           setBoard(data.board);\r\n//           setGameOver(true);\r\n//           setWinner(data.winner);\r\n//           setGameWon(data.winner !== 0);\r\n//           setShowConfetti(data.winner === currentPlayer);\r\n//           break;\r\n//         case 'message':\r\n//           setMessages((prevMessages) => [...prevMessages, data.text]);\r\n//           break;\r\n//         case 'reset':\r\n//           resetLocalGameState();\r\n//           break;\r\n//         case 'error':\r\n//           alert(data.message);\r\n//           navigate('/');\r\n//           break;\r\n//         case 'syncState':\r\n//           setBoard(data.board);\r\n//           setTurnPlayer(data.turnPlayer);\r\n//           break;\r\n//         default:\r\n//           break;\r\n//       }\r\n//     };\r\n\r\n//     return () => {\r\n//       ws.current.close();\r\n//     };\r\n//   }, [roomId, playerId]);\r\n\r\n//   // Get the current player number\r\n//   const getPlayer = () => {\r\n//     return currentPlayer;\r\n//   };\r\n\r\n//   // Handle a move on the board\r\n//   const boardMove = (space) => {\r\n//     const currPlayer = getPlayer();\r\n//     if (currPlayer == null || currPlayer !== turnPlayer || gameOver || currentPlayer > 2) {\r\n//       console.log('Move prevented: either game is over, not the player\\'s turn, or invalid player');\r\n//       return;\r\n//     }\r\n  \r\n//     const row = Math.floor(space / 3);\r\n//     const col = space % 3;\r\n//     let newBoard = [...board];\r\n//     if (newBoard[row][col] === 0) {  // Only allow a move in an empty space\r\n//       newBoard[row][col] = currPlayer;\r\n  \r\n//       setBoard(newBoard);\r\n//       setMoves(moves + 1);\r\n//       setTurnPlayer((turnPlayer % 2) + 1);\r\n  \r\n//       // Send the move to the server\r\n//       ws.current.send(JSON.stringify({\r\n//         type: 'move',\r\n//         room: roomId,\r\n//         board: newBoard,\r\n//         turnPlayer: (turnPlayer % 2) + 1,  // Update turn for the next player\r\n//         moveCnt: moves + 1\r\n//       }));\r\n//     }\r\n//   };\r\n\r\n//   // Reset the game state and notify the server\r\n//   const resetGame = () => {\r\n//     ws.current.send(JSON.stringify({\r\n//       type: 'playAgain',\r\n//       room: roomId,\r\n//       playerId: playerId,\r\n//     }));\r\n//   };\r\n\r\n//   // Send a message in the chat\r\n//   const sendMessage = (playerMessage) => {\r\n//     const text = 'Player ' + currentPlayer + ': ' + playerMessage;\r\n//     ws.current.send(JSON.stringify({ type: 'message', room: roomId, text }));\r\n//   };\r\n\r\n//   // Request to switch player numbers\r\n//   const requestSwitchPlayers = () => {\r\n//     ws.current.send(JSON.stringify({\r\n//       type: 'switchRequest',\r\n//       room: roomId,\r\n//       playerId: playerId,\r\n//     }));\r\n//   };\r\n\r\n//   // Reset the local game state\r\n//   const resetLocalGameState = () => {\r\n//     setTurnPlayer(1);\r\n//     setBoard([\r\n//       [0, 0, 0],\r\n//       [0, 0, 0],\r\n//       [0, 0, 0],\r\n//     ]);\r\n//     setGameWon(false);\r\n//     setWinner(0);\r\n//     setShowConfetti(false);\r\n//     setMoves(0);\r\n//     setGameOver(false);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"TicTacBG\">\r\n//       <h1>Welcome To The Game Room Player {currentPlayer}</h1>\r\n//       {gameOver ? (\r\n//         <div>\r\n//           {gameWon ? (\r\n//             <h2>Player {winner} won!</h2>\r\n//           ) : (\r\n//             <h2>It's a tie!</h2>\r\n//           )}\r\n//           <button className=\"btn btn-success mb-2\" onClick={resetGame}>Play Again</button>\r\n//         </div>\r\n//       ) : (\r\n//         <h2>Player {turnPlayer}'s turn</h2>\r\n//       )}\r\n//       <BoardMulti\r\n//         board={board}\r\n//         boardMove={boardMove}\r\n//         gameOver={gameOver}\r\n//       />\r\n//       <Link to=\"/\"> <button className=\"btn btn-danger mt-2\">Return</button> </Link>\r\n//       <button className=\"btn btn-secondary mt-2\" onClick={requestSwitchPlayers}>Switch Player Number</button>\r\n//       <ConfettiComponent active={showConfetti} />\r\n//       <div className=\"chat\">\r\n//         <h3>Chat</h3>\r\n//         <div className=\"messages\">\r\n//           {messages.map((msg, index) => (\r\n//             <p key={index}>{msg}</p>\r\n//           ))}\r\n//         </div>\r\n//         <input type=\"text\" id=\"chatInput\" />\r\n//         <button className=\"btn btn-primary\" onClick={() => sendMessage(document.getElementById('chatInput').value)}>Send</button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TicTacToeMulti;\r\n"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}